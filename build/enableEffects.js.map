{"version":3,"sources":["../src/enableEffects.js"],"names":["effectInstance","lastDependencies","cleanupFn","tryInvoke","fn","dependencies","some","prevDep","index","cleanup","fakeUseEffect","effectInstances","getEffectInstance","effect","key","toString","invoke","Object","values","forEach","instance","renderer","useEffect","useLayoutEffect","_dispatcher","cleanupEffects"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAIC,gBAAJ;;AACA,MAAIC,SAAS,GAAG,qBAAM,CAAE,CAAxB;;AAEA,SAAO;AACLC,IAAAA,SAAS,EAAE,mBAACC,EAAD,EAAKC,YAAL,EAAsB;AAC/B,UACEJ,gBAAgB,IAChB,CAACA,gBAAgB,CAACK,IAAjB,CACC,UAACC,OAAD,EAAUC,KAAV;AAAA,eAAoBD,OAAO,KAAKF,YAAY,CAACG,KAAD,CAA5C;AAAA,OADD,CAFH,EAKE;AACA;AACD;;AAEDN,MAAAA,SAAS;;AAETA,MAAAA,SAAS,GAAGE,EAAE,MAAO,YAAM,CAAE,CAA7B;AACD,KAdI;AAeLK,IAAAA,OAAO,EAAE;AAAA,aAAMP,SAAS,EAAf;AAAA;AAfJ,GAAP;AAiBD,CArBD;;AAuBA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAMC,eAAe,GAAG,EAAxB;;AAEA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAAY;AACpC,QAAMC,GAAG,GAAGD,MAAM,CAACE,QAAP,EAAZ;AACA,WAAQJ,eAAe,CAACG,GAAD,CAAf,GAAuBH,eAAe,CAACG,GAAD,CAAf,IAAwBd,cAAc,EAArE;AACD,GAHD;;AAKA,SAAO;AACLgB,IAAAA,MAAM,EAAE,gBAACH,MAAD,EAASR,YAAT,EAA0B;AAChCO,MAAAA,iBAAiB,CAACC,MAAD,CAAjB,CAA0BV,SAA1B,CAAoCU,MAApC,EAA4CR,YAA5C;AACD,KAHI;AAKLI,IAAAA,OAAO,EAAE,mBAAM;AACbQ,MAAAA,MAAM,CAACC,MAAP,CAAcP,eAAd,EAA+BQ,OAA/B,CAAuC,UAACC,QAAD,EAAc;AACnDA,QAAAA,QAAQ,CAACX,OAAT;AACD,OAFD;AAGD;AATI,GAAP;AAWD,CAnBD;;eAqBe,kBAACY,QAAD,EAAc;AAC3B,MAAMC,SAAS,GAAGZ,aAAa,EAA/B;AACA,MAAMa,eAAe,GAAGb,aAAa,EAArC;AAEAW,EAAAA,QAAQ,CAACG,WAAT,CAAqBF,SAArB,GAAiCA,SAAS,CAACN,MAA3C;AACAK,EAAAA,QAAQ,CAACG,WAAT,CAAqBD,eAArB,GAAuCA,eAAe,CAACP,MAAvD;;AAEAK,EAAAA,QAAQ,CAACG,WAAT,CAAqBC,cAArB,GAAsC,YAAM;AAC1CH,IAAAA,SAAS,CAACb,OAAV;AACAc,IAAAA,eAAe,CAACd,OAAhB;AACD,GAHD;AAID,C","sourcesContent":["//\n// credit to mikeborozdin for the smart hack of using the function body as map key here\n// https://github.com/mikeborozdin/jest-react-hooks-shallow/blob/master/src/mock-use-effect/mock-use-effect.ts\n//\n\nconst effectInstance = () => {\n  let lastDependencies;\n  let cleanupFn = () => {};\n\n  return {\n    tryInvoke: (fn, dependencies) => {\n      if (\n        lastDependencies &&\n        !lastDependencies.some(\n          (prevDep, index) => prevDep !== dependencies[index]\n        )\n      ) {\n        return;\n      }\n\n      cleanupFn();\n\n      cleanupFn = fn() || (() => {});\n    },\n    cleanup: () => cleanupFn(),\n  };\n};\n\nconst fakeUseEffect = () => {\n  const effectInstances = {};\n\n  const getEffectInstance = (effect) => {\n    const key = effect.toString();\n    return (effectInstances[key] = effectInstances[key] || effectInstance());\n  };\n\n  return {\n    invoke: (effect, dependencies) => {\n      getEffectInstance(effect).tryInvoke(effect, dependencies);\n    },\n\n    cleanup: () => {\n      Object.values(effectInstances).forEach((instance) => {\n        instance.cleanup();\n      });\n    },\n  };\n};\n\nexport default (renderer) => {\n  const useEffect = fakeUseEffect();\n  const useLayoutEffect = fakeUseEffect();\n\n  renderer._dispatcher.useEffect = useEffect.invoke;\n  renderer._dispatcher.useLayoutEffect = useLayoutEffect.invoke;\n\n  renderer._dispatcher.cleanupEffects = () => {\n    useEffect.cleanup();\n    useLayoutEffect.cleanup();\n  }\n}\n"],"file":"enableEffects.js"}