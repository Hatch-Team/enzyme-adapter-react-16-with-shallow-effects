"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

//
// credit to mikeborozdin for the smart hack of using the function body as map key here
// https://github.com/mikeborozdin/jest-react-hooks-shallow/blob/master/src/mock-use-effect/mock-use-effect.ts
//
var effectInstance = function effectInstance() {
  var lastDependencies;

  var cleanupFn = function cleanupFn() {};

  return {
    tryInvoke: function tryInvoke(fn, dependencies) {
      if (lastDependencies && !lastDependencies.some(function (prevDep, index) {
        return prevDep !== dependencies[index];
      })) {
        return;
      }

      lastDependencies = dependencies;
      cleanupFn();

      cleanupFn = fn() || function () {};
    },
    cleanup: function cleanup() {
      return cleanupFn();
    }
  };
};

var fakeUseEffect = function fakeUseEffect() {
  var effectInstances = {};

  var getEffectInstance = function getEffectInstance(effect) {
    var key = effect.toString();
    return effectInstances[key] = effectInstances[key] || effectInstance();
  };

  return {
    invoke: function invoke(effect, dependencies) {
      getEffectInstance(effect).tryInvoke(effect, dependencies);
    },
    cleanup: function cleanup() {
      Object.values(effectInstances).forEach(function (instance) {
        instance.cleanup();
      });
    }
  };
};

var _default = function _default(renderer) {
  var useEffect = fakeUseEffect();
  var useLayoutEffect = fakeUseEffect();
  renderer._dispatcher.useEffect = useEffect.invoke;
  renderer._dispatcher.useLayoutEffect = useLayoutEffect.invoke;

  renderer._dispatcher.cleanupEffects = function () {
    useEffect.cleanup();
    useLayoutEffect.cleanup();
  };
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmFibGVFZmZlY3RzLmpzIl0sIm5hbWVzIjpbImVmZmVjdEluc3RhbmNlIiwibGFzdERlcGVuZGVuY2llcyIsImNsZWFudXBGbiIsInRyeUludm9rZSIsImZuIiwiZGVwZW5kZW5jaWVzIiwic29tZSIsInByZXZEZXAiLCJpbmRleCIsImNsZWFudXAiLCJmYWtlVXNlRWZmZWN0IiwiZWZmZWN0SW5zdGFuY2VzIiwiZ2V0RWZmZWN0SW5zdGFuY2UiLCJlZmZlY3QiLCJrZXkiLCJ0b1N0cmluZyIsImludm9rZSIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJpbnN0YW5jZSIsInJlbmRlcmVyIiwidXNlRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwiX2Rpc3BhdGNoZXIiLCJjbGVhbnVwRWZmZWN0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixHQUFNO0FBQzNCLE1BQUlDLGdCQUFKOztBQUNBLE1BQUlDLFNBQVMsR0FBRyxxQkFBTSxDQUFFLENBQXhCOztBQUVBLFNBQU87QUFDTEMsSUFBQUEsU0FBUyxFQUFFLG1CQUFDQyxFQUFELEVBQUtDLFlBQUwsRUFBc0I7QUFDL0IsVUFDRUosZ0JBQWdCLElBQ2hCLENBQUNBLGdCQUFnQixDQUFDSyxJQUFqQixDQUNDLFVBQUNDLE9BQUQsRUFBVUMsS0FBVjtBQUFBLGVBQW9CRCxPQUFPLEtBQUtGLFlBQVksQ0FBQ0csS0FBRCxDQUE1QztBQUFBLE9BREQsQ0FGSCxFQUtFO0FBQ0E7QUFDRDs7QUFFRFAsTUFBQUEsZ0JBQWdCLEdBQUdJLFlBQW5CO0FBRUFILE1BQUFBLFNBQVM7O0FBRVRBLE1BQUFBLFNBQVMsR0FBR0UsRUFBRSxNQUFPLFlBQU0sQ0FBRSxDQUE3QjtBQUNELEtBaEJJO0FBaUJMSyxJQUFBQSxPQUFPLEVBQUU7QUFBQSxhQUFNUCxTQUFTLEVBQWY7QUFBQTtBQWpCSixHQUFQO0FBbUJELENBdkJEOztBQXlCQSxJQUFNUSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLEdBQU07QUFDMUIsTUFBTUMsZUFBZSxHQUFHLEVBQXhCOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsTUFBRCxFQUFZO0FBQ3BDLFFBQU1DLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxRQUFQLEVBQVo7QUFDQSxXQUFRSixlQUFlLENBQUNHLEdBQUQsQ0FBZixHQUF1QkgsZUFBZSxDQUFDRyxHQUFELENBQWYsSUFBd0JkLGNBQWMsRUFBckU7QUFDRCxHQUhEOztBQUtBLFNBQU87QUFDTGdCLElBQUFBLE1BQU0sRUFBRSxnQkFBQ0gsTUFBRCxFQUFTUixZQUFULEVBQTBCO0FBQ2hDTyxNQUFBQSxpQkFBaUIsQ0FBQ0MsTUFBRCxDQUFqQixDQUEwQlYsU0FBMUIsQ0FBb0NVLE1BQXBDLEVBQTRDUixZQUE1QztBQUNELEtBSEk7QUFLTEksSUFBQUEsT0FBTyxFQUFFLG1CQUFNO0FBQ2JRLE1BQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUCxlQUFkLEVBQStCUSxPQUEvQixDQUF1QyxVQUFDQyxRQUFELEVBQWM7QUFDbkRBLFFBQUFBLFFBQVEsQ0FBQ1gsT0FBVDtBQUNELE9BRkQ7QUFHRDtBQVRJLEdBQVA7QUFXRCxDQW5CRDs7ZUFxQmUsa0JBQUNZLFFBQUQsRUFBYztBQUMzQixNQUFNQyxTQUFTLEdBQUdaLGFBQWEsRUFBL0I7QUFDQSxNQUFNYSxlQUFlLEdBQUdiLGFBQWEsRUFBckM7QUFFQVcsRUFBQUEsUUFBUSxDQUFDRyxXQUFULENBQXFCRixTQUFyQixHQUFpQ0EsU0FBUyxDQUFDTixNQUEzQztBQUNBSyxFQUFBQSxRQUFRLENBQUNHLFdBQVQsQ0FBcUJELGVBQXJCLEdBQXVDQSxlQUFlLENBQUNQLE1BQXZEOztBQUVBSyxFQUFBQSxRQUFRLENBQUNHLFdBQVQsQ0FBcUJDLGNBQXJCLEdBQXNDLFlBQU07QUFDMUNILElBQUFBLFNBQVMsQ0FBQ2IsT0FBVjtBQUNBYyxJQUFBQSxlQUFlLENBQUNkLE9BQWhCO0FBQ0QsR0FIRDtBQUlELEMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gY3JlZGl0IHRvIG1pa2Vib3JvemRpbiBmb3IgdGhlIHNtYXJ0IGhhY2sgb2YgdXNpbmcgdGhlIGZ1bmN0aW9uIGJvZHkgYXMgbWFwIGtleSBoZXJlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWlrZWJvcm96ZGluL2plc3QtcmVhY3QtaG9va3Mtc2hhbGxvdy9ibG9iL21hc3Rlci9zcmMvbW9jay11c2UtZWZmZWN0L21vY2stdXNlLWVmZmVjdC50c1xuLy9cblxuY29uc3QgZWZmZWN0SW5zdGFuY2UgPSAoKSA9PiB7XG4gIGxldCBsYXN0RGVwZW5kZW5jaWVzO1xuICBsZXQgY2xlYW51cEZuID0gKCkgPT4ge307XG5cbiAgcmV0dXJuIHtcbiAgICB0cnlJbnZva2U6IChmbiwgZGVwZW5kZW5jaWVzKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGxhc3REZXBlbmRlbmNpZXMgJiZcbiAgICAgICAgIWxhc3REZXBlbmRlbmNpZXMuc29tZShcbiAgICAgICAgICAocHJldkRlcCwgaW5kZXgpID0+IHByZXZEZXAgIT09IGRlcGVuZGVuY2llc1tpbmRleF1cbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGFzdERlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICAgIFxuICAgICAgY2xlYW51cEZuKCk7XG5cbiAgICAgIGNsZWFudXBGbiA9IGZuKCkgfHwgKCgpID0+IHt9KTtcbiAgICB9LFxuICAgIGNsZWFudXA6ICgpID0+IGNsZWFudXBGbigpLFxuICB9O1xufTtcblxuY29uc3QgZmFrZVVzZUVmZmVjdCA9ICgpID0+IHtcbiAgY29uc3QgZWZmZWN0SW5zdGFuY2VzID0ge307XG5cbiAgY29uc3QgZ2V0RWZmZWN0SW5zdGFuY2UgPSAoZWZmZWN0KSA9PiB7XG4gICAgY29uc3Qga2V5ID0gZWZmZWN0LnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIChlZmZlY3RJbnN0YW5jZXNba2V5XSA9IGVmZmVjdEluc3RhbmNlc1trZXldIHx8IGVmZmVjdEluc3RhbmNlKCkpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaW52b2tlOiAoZWZmZWN0LCBkZXBlbmRlbmNpZXMpID0+IHtcbiAgICAgIGdldEVmZmVjdEluc3RhbmNlKGVmZmVjdCkudHJ5SW52b2tlKGVmZmVjdCwgZGVwZW5kZW5jaWVzKTtcbiAgICB9LFxuXG4gICAgY2xlYW51cDogKCkgPT4ge1xuICAgICAgT2JqZWN0LnZhbHVlcyhlZmZlY3RJbnN0YW5jZXMpLmZvckVhY2goKGluc3RhbmNlKSA9PiB7XG4gICAgICAgIGluc3RhbmNlLmNsZWFudXAoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCAocmVuZGVyZXIpID0+IHtcbiAgY29uc3QgdXNlRWZmZWN0ID0gZmFrZVVzZUVmZmVjdCgpO1xuICBjb25zdCB1c2VMYXlvdXRFZmZlY3QgPSBmYWtlVXNlRWZmZWN0KCk7XG5cbiAgcmVuZGVyZXIuX2Rpc3BhdGNoZXIudXNlRWZmZWN0ID0gdXNlRWZmZWN0Lmludm9rZTtcbiAgcmVuZGVyZXIuX2Rpc3BhdGNoZXIudXNlTGF5b3V0RWZmZWN0ID0gdXNlTGF5b3V0RWZmZWN0Lmludm9rZTtcblxuICByZW5kZXJlci5fZGlzcGF0Y2hlci5jbGVhbnVwRWZmZWN0cyA9ICgpID0+IHtcbiAgICB1c2VFZmZlY3QuY2xlYW51cCgpO1xuICAgIHVzZUxheW91dEVmZmVjdC5jbGVhbnVwKCk7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=enableEffects.js.map